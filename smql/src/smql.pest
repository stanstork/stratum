// ==============================
//         Basic Rules
// ==============================

WHITESPACE  = _{ " " | "\t" | "\n" | "\r" }
COMMENT     = _{ "//" ~ (!"\n" ~ ANY)* }

ident       = @{ (ASCII_ALPHANUMERIC | "_")+ }
string      = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

integer     = @{ ASCII_DIGIT+ }
decimal     = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }

boolean     = { ^"TRUE" | ^"FALSE" }
operator    = { "+" | "-" | "*" | "/" }
comparator  = {">=" | "<=" | "!=" | "=" | ">" | "<"}

no_explicit_param = { "*" }

data_format     = { ^"MYSQL" | ^"POSTGRES" | ^"SQLITE" | ^"MONGODB" }
con_str         = { string }
connection_type = { ^"SOURCE" | ^"DESTINATION" }

// ==============================
//         Program Structure
// ==============================

program = _{ SOI ~ WHITESPACE* ~ statement* ~ WHITESPACE* ~ EOI }

statement = _{
    connections
    | migrate
    | filter
    | map
    | load
    | aggregate
}

// ==============================
//         CONNECTIONS
// ==============================

connections = { 
    ^"CONNECTIONS" ~ WHITESPACE* ~ "(" 
    ~ connection_pair ~ ("," ~ WHITESPACE* ~ connection_pair)* 
    ~ WHITESPACE* ~ ")" ~ WHITESPACE* ~ ";"
}

connection_pair = { 
    connection_type ~ WHITESPACE* 
    ~ data_format ~ WHITESPACE* 
    ~ con_str 
}

// ==============================
//         MIGRATE
// ==============================

migrate = {
    ^"MIGRATE" ~ WHITESPACE* ~ "("
    ~ WHITESPACE* ~ migrate_pair ~ ("," ~ WHITESPACE* ~ migrate_pair)* ~ WHITESPACE* ~ ")"
    ~ (WHITESPACE* ~ migrate_settings)? ~ WHITESPACE* ~ ";"
}

migrate_pair = {
    (ident | "[" ~ WHITESPACE* ~ ident ~ ("," ~ WHITESPACE* ~ ident)* ~ WHITESPACE* ~ "]")
    ~ WHITESPACE* ~ "->" ~ WHITESPACE* ~ ident
}

migrate_settings = {
    ^"WITH" ~ WHITESPACE* ~ ^"SETTINGS" ~ WHITESPACE* ~ "("
    ~ setting_pair ~ ("," ~ WHITESPACE* ~ setting_pair)* 
    ~ WHITESPACE* ~ ")"
}

setting_pair = {
    ident ~ WHITESPACE* ~ "=" ~ WHITESPACE* ~ (boolean | decimal | integer | ident)
}

// ==============================
//         FILTER
// ==============================

filter = {
    ^"FILTER" ~ WHITESPACE* ~ "("
    ~ WHITESPACE* ~ condition ~ ("," ~ WHITESPACE* ~ condition)*
    ~ WHITESPACE* ~ ")" ~ WHITESPACE* ~ ";"
}

condition = { ident ~ WHITESPACE* ~ comparator ~ WHITESPACE* ~ (string | decimal | integer | boolean) }

// ==============================
//         LOOKUPS (LOAD)
// ==============================

load = {
    ^"LOAD" ~ WHITESPACE* ~ ident // Lookup name
    ~ WHITESPACE* ~ ^"FROM" ~ WHITESPACE* ~ ident  // Table name
    ~ WHITESPACE* ~ ^"USING" ~ WHITESPACE* ~ ident  // Key column
    ~ WHITESPACE* ~ ";"
}

// ==============================
//         MAP
// ==============================

map = {
    ^"MAP" ~ WHITESPACE* ~ "("
    ~ table_mapping ~ ("," ~ WHITESPACE* ~ table_mapping)* 
    ~ WHITESPACE* ~ ")" ~ WHITESPACE* ~ ";"
}

table_mapping = {
    ident ~ WHITESPACE* ~ "("
    ~ mapping ~ ("," ~ WHITESPACE* ~ mapping)* 
    ~ WHITESPACE* ~ ")"
}

mapping = { expression ~ WHITESPACE* ~ "->" ~ WHITESPACE* ~ ident }

// ==============================
//         AGGREGATE
// ==============================

aggregate = {
    ^"AGGREGATE" ~ WHITESPACE* ~ "("
    ~ aggregation ~ ("," ~ WHITESPACE* ~ aggregation)*
    ~ WHITESPACE* ~ ")" ~ WHITESPACE* ~ ";"
}

aggregation = { aggregate_function ~ "(" ~ (lookup_expression | ident | no_explicit_param) ~ ")" ~ WHITESPACE* ~ "->" ~ WHITESPACE* ~ ident }

aggregate_function = { "SUM" | "AVG" | "COUNT" | "MIN" | "MAX" }

// ==============================
//         EXPRESSIONS
// ==============================

expression = { arithmetic_expression | function_call | lookup_expression | ident | string | decimal | integer }

arithmetic_expression = { 
    (function_call | lookup_expression | decimal | integer | ident) 
    ~ (WHITESPACE* ~ operator ~ WHITESPACE* ~ (function_call | lookup_expression | decimal | integer | ident))+ 
}

function_call = { ident ~ "(" ~ function_args? ~ ")" }

function_args = { (arithmetic_expression | lookup_expression | expression) ~ ("," ~ WHITESPACE* ~ (arithmetic_expression | lookup_expression | expression))* }

lookup_expression = { ident ~ "[" ~ ident ~ "]" ~ ("." ~ ident)? }
